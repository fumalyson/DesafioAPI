import { evaluations } from './helpers'

export function deepKey(hash: object, key: string): any;

export function deepClone(hash: object): object;

export function deepMerge(target: object, ...sources: object[]): object;

export function isObject(hash: any): boolean;

export function isHash(hash: any): boolean;

export function isDate(hash: any): boolean;

export function asyncJs(url: string): Promise<any>;

export function isRegExp(hash: any): boolean;

export function sortBy(items: Array<object>, fields: Array<string>);

export function getClassName(_class: object): string;

export function ucfirst(string: string): string;

export function flattenObject(hash: object, separator?: '/'): object;

export function jsEncode(string: string): string;

export function thumbRange(size: number): number;

export function starRating(evaluations: evaluations, precision?: number): number;

export function prepareKey(key: string): string;

export function convertPlace(place: object): object;

export function idCidade(pais: string, uf: string, nome: string): string;

export function idCidadeAddressComponent(address_components: Array<object>): string;

export function nomeCidadeAddressComponent(address_components: Array<object>): string;

export function idGeneratorDesc(): string;

export function idGeneratorNumeric(order: string): string;

export function idDescTimestamp(id: string): string;

export function prevId(id: string): string;

export function nextId(id: string): string;

export abstract class BaseModel {
  protected constructor(mapping: object, hash: object);

  sanitize(rules: object): object;

  _liteRules(): object;

  lite(): object;
}

export class I18n {
  constructor(locales: object, locale: 'pt_br');

  current: object

  t(key: string, replaces?: object): string;

  setLocale(locale: string): this;

  getLocale(): object;

  getAvailableLocales(): Array<string>;
}

export class Language {
  constructor(i18n: I18n, fecha: object);

  current: string

  reset(locale: object);
}

export function sanitize(hash: object, rules: object): object;

type localStorageFacade = {
  namespace: string;
  setItem(key: string, item: object): void;
  getItem(key: string): object | string;
  removeItem(key: string): void;
  clear(): void;
}

export const LocalStorageFacade: localStorageFacade
